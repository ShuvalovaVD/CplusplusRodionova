// Лаба 1 Вариант 13

/*
  Вариант 13. Определите класс для формирования случайного двоичного вектора заданной длины (данный вектор это одномерный массив, значениями которого могут быть толь числа 0 и 1).
  После генерации вектора осуществляется его кодирование, т.е. к вектору добавляется один контрольный разряд –  такой, чтобы общее число единичных разрядов в коде было четным.
  Общий интерфейс класса может выглядеть так:
class kod_chet
{int *pvect; // описание указателя на массив 
                      // пусть нулевой элемент массива будет контрольным разрядом
int N; // переменная которая хранит размер массива
//…
public:
	kod_chet (int); // конструктор класса
	void kod( ); // кодирование вектора
	void print ( ); // вывод вектора 
};
Конструктор kod_chet:: kod_chet(int) генерирует с помощью датчика случайных чисел массив заданного размера 
(например, kod_chet(10) должен создать массив из 10 чисел, в 0-й разряд записываем 0, остальные 9 значений генерируем случайно). 
Метод kod( ) проверяет вектор на четность (количество единиц в массиве -четное) и в зависимости от результата проверки дописывает в контрольный разряд 0 или 1.
Общий интерфейс класса может выглядеть так:
kod_chet x(20); // вызов конструктора
x.kod( ); // вызов метода для проверки на четность
x.print( );// вывод вектора на экран
Программа должна выполнить работу с тремя различными объектами.
*/

#include <iostream>
#include <math.h>
#include <algorithm>
#include <locale.h>
#include <iomanip>
#include <time.h>

using namespace std;

class KOD_CHET {
private:
	int N;  // размер массива
	int* pvect;  // динамическое выделение памяти
public:
	KOD_CHET(int n) {
		N = n;
		pvect = new int[N];
		pvect[0] = 0;  // нулевой элемент будет контрольным разрядом, изначально там 0
		for (int i = 1; i < N; i++) {
			pvect[i] = rand() % 2;
		}
	}
	void kod() {
		int cnt_1 = 0;
		for (int i = 1; i < N; ++i) {
			if (pvect[i] == 1) {
				cnt_1++;
			}
		}
		if (cnt_1 % 2 == 1) {  // если нечетное количество 
			pvect[0] = 1;
		}
	}
	void print() {
		for (int i = 0; i < N; ++i) {
			cout << setw(3) << pvect[i];
		}
		cout << endl;
	}
	~KOD_CHET() {  // деструктор
		delete [] pvect;
	}
};

int main() {
	setlocale(LC_ALL, "ru");
	srand((unsigned)time(NULL));

	KOD_CHET k1(10);
	cout << "Исходный объект 1:\n";
	k1.print();
	k1.kod();
	cout << "После проверки:\n";
	k1.print();

	KOD_CHET k2(5);
	cout << "Исходный объект 2:\n";
	k2.print();
	k2.kod();
	cout << "После проверки:\n";
	k2.print();

	KOD_CHET k3(15);
	cout << "Исходный объект 3:\n";
	k3.print();
	k3.kod();
	cout << "После проверки:\n";
	k3.print();

	return 0;
}
